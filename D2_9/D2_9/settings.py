"""
Django settings for D2_9 project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os.path  # Для поиска шаблонов flatpages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p3*(^r2)yg1o=*p+zcwz@44&tj@x6ykl=jltq0@6b0i#16yzgt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',  # sites framework, позволяет разделять страницы между несколькими сайтами
    'django.contrib.flatpages',
    'django.contrib.redirects',  # Хочу иметь перенаправления с пропавших адресов!

    'django_filters',  # см. D4.2 TODO здесь дженерики фильтров, а я ещё не изучил их настройку и использование
    'NewsPortal',  # Здесь наш собственный код.
    'allauth',  # надо для пакета allauth по аутентификации пользователей
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # По гуглу. хорошо бы ещё через госуслуги
    #'allauth.socialaccount.providers.github',
]

# добавляем переменную для указания сайта для приложения sites:
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',    # Для локализации - по умолчанию не включено!
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',  # TODO узнать назначение этого middleware
    'django.contrib.redirects.middleware.RedirectFallbackMiddleware',  # Хочу иметь перенаправления с пропавших адресов!
]

ROOT_URLCONF = 'D2_9.urls'  # ModuleNotFoundError: No module named 'D2_9.urls.py'; 'D2_9.urls' is not a package

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # для поиска шаблонов
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # дефолтно, но `allauth` needs this from django
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'D2_9.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Добавлено для работы django-allauth
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]
# Добавлено для работы django-allauth
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/news/'  # перенаправление после регистрации
# Настройка входа по электронной почте
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True  # А почта должна быть уникальной
ACCOUNT_USERNAME_REQUIRED = False  # Можно иметь пользователя без имени и входить по почте
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # Метод входа по почте или имени
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Проверять почту не будем, можно фальшивую

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# D7.3.
# В конфигурацию проекта (settings.py) дописываем следующие строки (см. настройки celery.py):
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# D13 Логгирование:
# https://webdevblog.ru/loggirovanie-v-django-nachalnyj-obzor/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        #время, уровень сообщения, сообщения.
        'console': {
            'format': '%(asctime)s %(levelname)-8s %(message)s'
        },
        #указанием времени, уровня логирования, модуля, в котором возникло сообщение (аргумент module) и само сообщение.
        'general': {
            'format': '%(asctime)s %(levelname)-8s %(module)s %(message)s'
        },
        #указывается время, уровень логирования, само сообщение, путь к источнику сообщения и стэк ошибки.
        'errors': {
            'format': '%(asctime)s %(levelname)-8s %(message)s %(pathname)s '
        },
        #время, уровень логирования, модуль и сообщение.
        'security': {
            'format': '%(asctime)s %(levelname)-8s %(module)s %(message)s'
        },
        #время, уровень логирования, само сообщение, путь к источнику сообщения
        'mail': {
            'format': '%(asctime)s %(levelname)-8s %(message)s %(pathname)s '
        }
    },
    'filters': {
        'require_debug_true': {     # фильтр, который пропускает записи только в случае, когда DEBUG = True.
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        #В консоль должны выводиться все сообщения уровня DEBUG и выше, включающие время, уровень сообщения, сообщения.
        #Для сообщений WARNING и выше дополнительно должен выводиться путь к источнику события
        #(используется аргумент pathname в форматировании). А для сообщений ERROR и CRITICAL еще должен выводить стэк ошибки
        #(аргумент exc_info). Сюда должны попадать все сообщения с основного логгера django.
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # пропускать через фильтр
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        #В файл general.log должны выводиться сообщения уровня INFO и выше только с указанием
        #времени, уровня логирования, модуля, в котором возникло сообщение (аргумент module) и само сообщение.
        #Сюда также попадают сообщения с регистратора django.
        'general': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'general',
            'filename': 'general.log'
        },
        #В файл errors.log должны выводиться сообщения только уровня ERROR и CRITICAL. В сообщении указывается
        #время, уровень логирования, само сообщение, путь к источнику сообщения и стэк ошибки.
        #В этот файл должны попадать сообщения только из логгеров
        #django.request, django.server, django.template, django.db_backends.
        'errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'errors',
            'filename': 'errors.log'
        },
        #В файл security.log должны попадать только сообщения, связанные с безопасностью, а значит только из
        #логгера django.security. Формат вывода предполагает время, уровень логирования, модуль и сообщение.
        'security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'security',
            'filename': 'security.log'
        },
        #На почту должны отправляться сообщения уровней ERROR и выше из django.request и django.server по формату
        #время, уровень логирования, само сообщение, путь к источнику сообщения
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        '': {
            'level': 'DEBUG',
            'handlers': ['console']
        },
        'django.request': {
            'level': 'INFO',
            'handlers': ['mail_admins', 'errors']
        },
        'django.server': {
            'level': 'INFO',
            'handlers': ['mail_admins', 'errors']
        },
        'django.security': {
            'level': 'INFO',
            'handlers': ['security']
        },
        'django.template': {
            'level': 'INFO',
            'handlers': ['errors']
        },
        'django.db_backends': {
            'level': 'INFO',
            'handlers': ['errors']
        }
    }
}